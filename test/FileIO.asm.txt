;----------------------------------------------------------
; Constant Definitions
;----------------------------------------------------------

NUM_LINES equ 10
MAX_LINE  equ 80

STD_INPUT  equ -10d                     ;Function number for keyboard input
STD_OUTPUT equ -11d                     ;Function number for monitor output

LF equ 10d                              ;Line feed ascii constant
CR equ 13d                              ;Carriage return constant
NEWLINE equ CR,LF                       ;Combine CR and LF for carriage return

ENABLE_PROCESSED_INPUT  equ 1           ;Flag to turn off line buffering
ENABLE_PROCESSED_OUTPUT equ 1           ;Flag to turn off line bufferin
ENABLE_LINE_WRAP        equ 3           ;Flag to trun line wrap on
DISABLE_PROCESSED_INPUT equ 7           ;Flag to turn on line buffering

CREATE_NEW    EQU  1                    ;Parameter for creating a new file
CREATE_ALWAYS EQU  2                    ;Always create (overwrite existing)
OPEN_EXISTING EQU  3                    ;Parameter for opening an existing file
GENERIC_READ  EQU  80000000h            ;Parameter for reading a file
GENERIC_WRITE EQU  40000000h            ;Parameter for writing a file

FILE_SHARE_READ   equ 1
FILE_SHARE_WRITE  equ 2
FILE_SHARE_DELETE equ 4

FILE_ATTRIBUTE_NORMAL equ 80h

HANDLE equ dword

;----------------------------------------------------------
; prototype Declarations for libarary imports
;----------------------------------------------------------

ExitProcess proto,
    dwExitCode:dword				   ;The exit code for the process 

GetStdHandle proto, 
	nStdHandle: dword                  ;The standard device. -10=INPUT, -11=OUTPUT, -13=ERROR

SetConsoleMode proto,                  
    hConsoleHandle:dword,              ;A handle to the console input buffer or a console screen buffer
	dwMode:dword                       ;The input or output mode to be set. 

ReadFile proto,	
    hFile:dword,                       ;A handle to the device
	lpBuffer:near32,                   ;A pointer to the buffer that receives the data read 
    nNumberOfCharsToRead:dword,        ;The maximum number of bytes to be read.
    lpNumberOfbytesRead:near32,        ;A pointer to the variable that receives the number of bytes read
    lpOverlapped:near32                ;A pointer to an OVERLAPPED structure is required if the hFile parameter 
	                                   ;was opened with FILE_FLAG_OVERLAPPED, otherwise it can be NULL.

WriteFile proto,                  
    hFile:dword, lpBuffer:near32,      ;A handle to the device
    nNumberOfCharsToWrite:dword,       ;The maximum number of bytes to be written.
    lpNumberOfbytesWritten:near32,     ;A pointer to the variable that receives the number of bytes written
    lpOverlapped:near32                ;A pointer to an OVERLAPPED structure is required if the hFile parameter 
	                                   ;was opened with FILE_FLAG_OVERLAPPED, otherwise it can be NULL.


CloseHandle proto,                     ;Prototype for closing a file
    fHandle:dword

GetLastError proto                     ;Prototype for getting specific error


CreateFileA proto,                     ;Prototype for CreateFile, used for getting handle to new or existin file
    lpFileName:near32,
	dwDesiredAccess:dword,
	dwShareMode:dword,
	lpSecurityAttributes:near32,
	dwCreationDisposition:dword,
	dwFlagsAndAttributes:dword,
	hTemplateFile:dword

SetConsoleCursorPosition proto,        ;Prototype for setting cursor position
	hConsoleOutput:dword,
	dwCursorPosition:dword

GetConsoleScreenBufferInfo proto,      ;Prototype for getting console info
	hConsoleOutput:dword,
	lpConsoleScreenBufferInfo:near32

 FillConsoleOutputCharacterA proto,    ;Prototype for filling screen with character (used for clear screen)
	hConsoleOutput:dword,
	cCharacter:byte,
	nLength:dword,
	dwWriteCoord:dword,
	lpNumberOfCharsWritten:near32

;----------------------------------------------------------
; Data Segment -- Global Variables
;----------------------------------------------------------
.data

	strAddr			dd  ?
	strLength		dd  ?
	hStdOut			dd  ?
	hStdIn			dd  ?
	hFileOut        dd  ?
	hFileIn         dd  ?
	read			dd  ?
	written			dd  ?	

	fdata           db 1024 dup(0)
	inFilename      db 256 dup(0)
	filePrompt      db "Enter filename: ",0

	
;----------------------------------------------------------
; Code Segment
;----------------------------------------------------------
.code
	
;------------------------------------------------------------------------------
; Procedure to read file (filename in inFilename) into fdata buffer
;------------------------------------------------------------------------------
ReadFileContents  proc                 ; Define procedure
            pushad                     ; save all registers
            pushfd                     ; save flags

            invoke CreateFileA, near32 ptr inFilename, GENERIC_READ, FILE_SHARE_READ,
			   0, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, 0

            mov hFileIn, eax           ; save the handle

            mov ecx, 1024d             ; string length
            mov strLength, ecx         ; maximum string to accept
            mov strAddr, esi           ; save pointer to input string
            invoke ReadFile,           ; invoke standard ReadFile with
              hFileIn,                 ;   file handle for keyboard
              strAddr,                 ;   address of string
              strLength,               ;   length of string
              near32 ptr read,         ;   variable for # bytes read
              0                        ;   overlapped mode
            mov ecx, read              ; number of bytes read

            popfd                      ; restore flags
            popad                      ; restore registers
            ret                        ; return to caller
ReadFileContents   endp
	